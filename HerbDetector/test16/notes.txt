Quadruple image set, with proper rotations this time, which will also go through augmentation.
batch_size = 128
added batch normalization
-----------------------

def make_model(input_shape, num_classes):
    inputs = keras.Input(shape=input_shape)

    

    # Entry block
    x = layers.Rescaling(1.0 / 255)(inputs)
    x = layers.BatchNormalization()(x)
    x = layers.Conv2D(64, (6, 6), strides=1, activation='relu')(x)
    x = layers.AveragePooling2D((4, 4))(x)
    x = layers.Conv2D(128, (6, 6), strides=1, activation='relu')(x)
    
    
    
    #x = layers.AveragePooling2D((2, 2))(x)
    #x = layers.Conv2D(128, (3, 3), strides=1, activation='relu')(x)


    if num_classes == 2:
        units = 1
    else:
        units = num_classes

    x = layers.Flatten()(x)
    x = layers.Dropout(0.25)(x)
    # We specify activation=None so as to return logits
    outputs = layers.Dense(units, activation=None)(x)
    return keras.Model(inputs, outputs)

print("Building a model.")
model = make_model(input_shape=image_size+(3,), num_classes=3)

--------------------------------------------------------


2024-01-24 17:14:02.458661: I tensorflow/core/util/port.cc:113] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
2024-01-24 17:14:02.477487: I tensorflow/core/platform/cpu_feature_guard.cc:210] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
To enable the following instructions: AVX2 AVX512F AVX512_VNNI FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.
Finished importing.
Filter out corrupted images.
Deleted 0 images
Generating a Dataset.
Found 5090 files belonging to 3 classes.
Using 4072 files for training.
Using 1018 files for validation.
Applying `data_augmentation` to the training images.
Prefetching samples in GPU memory helps maximize GPU utilization.
Building a model.
Saved Model Layout Map.
Training the model.
Epoch 1/20
32/32 ━━━━━━━━━━━━━━━━━━━━ 48s 1s/step - accuracy: 0.3571 - loss: 1.3041 - val_accuracy: 0.4637 - val_loss: 1.0861
Epoch 2/20
32/32 ━━━━━━━━━━━━━━━━━━━━ 49s 1s/step - accuracy: 0.4792 - loss: 1.0108 - val_accuracy: 0.4764 - val_loss: 1.0304
Epoch 3/20
32/32 ━━━━━━━━━━━━━━━━━━━━ 49s 1s/step - accuracy: 0.5604 - loss: 0.9061 - val_accuracy: 0.4813 - val_loss: 0.9835
Epoch 4/20
32/32 ━━━━━━━━━━━━━━━━━━━━ 49s 1s/step - accuracy: 0.6099 - loss: 0.8286 - val_accuracy: 0.5422 - val_loss: 0.9469
Epoch 5/20
32/32 ━━━━━━━━━━━━━━━━━━━━ 49s 1s/step - accuracy: 0.6346 - loss: 0.8033 - val_accuracy: 0.6257 - val_loss: 0.8733
Epoch 6/20
32/32 ━━━━━━━━━━━━━━━━━━━━ 49s 1s/step - accuracy: 0.6611 - loss: 0.7470 - val_accuracy: 0.6798 - val_loss: 0.7828
Epoch 7/20
32/32 ━━━━━━━━━━━━━━━━━━━━ 49s 1s/step - accuracy: 0.7022 - loss: 0.6836 - val_accuracy: 0.7250 - val_loss: 0.6859
Epoch 8/20
32/32 ━━━━━━━━━━━━━━━━━━━━ 49s 1s/step - accuracy: 0.7310 - loss: 0.6262 - val_accuracy: 0.7151 - val_loss: 0.6377
Epoch 9/20
32/32 ━━━━━━━━━━━━━━━━━━━━ 49s 1s/step - accuracy: 0.7521 - loss: 0.5906 - val_accuracy: 0.7308 - val_loss: 0.6170
Epoch 10/20
32/32 ━━━━━━━━━━━━━━━━━━━━ 49s 1s/step - accuracy: 0.7757 - loss: 0.5480 - val_accuracy: 0.7652 - val_loss: 0.5478
Epoch 11/20
32/32 ━━━━━━━━━━━━━━━━━━━━ 49s 1s/step - accuracy: 0.7839 - loss: 0.5394 - val_accuracy: 0.7692 - val_loss: 0.5745
Epoch 12/20
32/32 ━━━━━━━━━━━━━━━━━━━━ 49s 1s/step - accuracy: 0.8154 - loss: 0.4860 - val_accuracy: 0.7642 - val_loss: 0.5354
Epoch 13/20
32/32 ━━━━━━━━━━━━━━━━━━━━ 49s 1s/step - accuracy: 0.8276 - loss: 0.4437 - val_accuracy: 0.8026 - val_loss: 0.5267
Epoch 14/20
32/32 ━━━━━━━━━━━━━━━━━━━━ 49s 1s/step - accuracy: 0.8421 - loss: 0.4238 - val_accuracy: 0.8016 - val_loss: 0.5166
Epoch 15/20
32/32 ━━━━━━━━━━━━━━━━━━━━ 49s 1s/step - accuracy: 0.8385 - loss: 0.4163 - val_accuracy: 0.8035 - val_loss: 0.4900
Epoch 16/20
32/32 ━━━━━━━━━━━━━━━━━━━━ 49s 1s/step - accuracy: 0.8563 - loss: 0.3825 - val_accuracy: 0.7888 - val_loss: 0.5437
Epoch 17/20
32/32 ━━━━━━━━━━━━━━━━━━━━ 49s 1s/step - accuracy: 0.8643 - loss: 0.3676 - val_accuracy: 0.8075 - val_loss: 0.4799
Epoch 18/20
32/32 ━━━━━━━━━━━━━━━━━━━━ 49s 1s/step - accuracy: 0.8667 - loss: 0.3556 - val_accuracy: 0.8517 - val_loss: 0.3886
Epoch 19/20
32/32 ━━━━━━━━━━━━━━━━━━━━ 49s 1s/step - accuracy: 0.8822 - loss: 0.3342 - val_accuracy: 0.8772 - val_loss: 0.3212
Epoch 20/20
32/32 ━━━━━━━━━━━━━━━━━━━━ 49s 1s/step - accuracy: 0.8798 - loss: 0.3259 - val_accuracy: 0.8350 - val_loss: 0.4507
Saving model.
Plotting Model Accuracy.
Saved Graph #1
Plotting Model Loss
Saved Graph #2.
Loading model.
Running inference on new data.
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 40ms/step
[[ 0.28110313  0.6395365  -3.3488643 ]]
indexOfMax: 1
Done

