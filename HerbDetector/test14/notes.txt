Quadruple image set, with proper rotations this time, which will also go through augmentation.
batch_size = 128

-----------------------

def make_model(input_shape, num_classes):
    inputs = keras.Input(shape=input_shape)

    

    # Entry block
    x = layers.Rescaling(1.0 / 255)(inputs)
    x = layers.Conv2D(64, (6, 6), strides=1, activation='relu')(x)
    x = layers.AveragePooling2D((4, 4))(x)
    x = layers.Conv2D(128, (6, 6), strides=1, activation='relu')(x)
    #x = layers.AveragePooling2D((2, 2))(x)
    #x = layers.Conv2D(128, (3, 3), strides=1, activation='relu')(x)


    if num_classes == 2:
        units = 1
    else:
        units = num_classes

    x = layers.Flatten()(x)
    x = layers.Dropout(0.25)(x)
    # We specify activation=None so as to return logits
    outputs = layers.Dense(units, activation=None)(x)
    return keras.Model(inputs, outputs)

print("Building a model.")
model = make_model(input_shape=image_size+(3,), num_classes=3)
--------------------------------------------------------


2024-01-24 16:20:58.108801: I tensorflow/core/util/port.cc:113] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
2024-01-24 16:20:58.128121: I tensorflow/core/platform/cpu_feature_guard.cc:210] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
To enable the following instructions: AVX2 AVX512F AVX512_VNNI FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.
Finished importing.
Filter out corrupted images.
Deleted 0 images
Generating a Dataset.
Found 5090 files belonging to 3 classes.
Using 4072 files for training.
Using 1018 files for validation.
Applying `data_augmentation` to the training images.
Prefetching samples in GPU memory helps maximize GPU utilization.
Building a model.
Saved Model Layout Map.
Training the model.
Epoch 1/20
32/32 ━━━━━━━━━━━━━━━━━━━━ 36s 1s/step - accuracy: 0.3728 - loss: 1.2425 - val_accuracy: 0.5098 - val_loss: 0.9791
Epoch 2/20
32/32 ━━━━━━━━━━━━━━━━━━━━ 37s 1s/step - accuracy: 0.5273 - loss: 0.9690 - val_accuracy: 0.6100 - val_loss: 0.8777
Epoch 3/20
32/32 ━━━━━━━━━━━━━━━━━━━━ 37s 1s/step - accuracy: 0.5931 - loss: 0.8853 - val_accuracy: 0.6336 - val_loss: 0.8196
Epoch 4/20
32/32 ━━━━━━━━━━━━━━━━━━━━ 37s 1s/step - accuracy: 0.6221 - loss: 0.8156 - val_accuracy: 0.5786 - val_loss: 0.9134
Epoch 5/20
32/32 ━━━━━━━━━━━━━━━━━━━━ 37s 1s/step - accuracy: 0.6651 - loss: 0.7750 - val_accuracy: 0.6503 - val_loss: 0.7893
Epoch 6/20
32/32 ━━━━━━━━━━━━━━━━━━━━ 37s 1s/step - accuracy: 0.6464 - loss: 0.7614 - val_accuracy: 0.6857 - val_loss: 0.7676
Epoch 7/20
32/32 ━━━━━━━━━━━━━━━━━━━━ 37s 1s/step - accuracy: 0.6766 - loss: 0.7340 - val_accuracy: 0.6984 - val_loss: 0.7032
Epoch 8/20
32/32 ━━━━━━━━━━━━━━━━━━━━ 37s 1s/step - accuracy: 0.6827 - loss: 0.7093 - val_accuracy: 0.6218 - val_loss: 0.9146
Epoch 9/20
32/32 ━━━━━━━━━━━━━━━━━━━━ 37s 1s/step - accuracy: 0.7130 - loss: 0.6794 - val_accuracy: 0.6690 - val_loss: 0.8126
Epoch 10/20
32/32 ━━━━━━━━━━━━━━━━━━━━ 37s 1s/step - accuracy: 0.7279 - loss: 0.6356 - val_accuracy: 0.6729 - val_loss: 0.7649
Epoch 11/20
32/32 ━━━━━━━━━━━━━━━━━━━━ 37s 1s/step - accuracy: 0.7237 - loss: 0.6406 - val_accuracy: 0.6660 - val_loss: 0.8015
Epoch 12/20
32/32 ━━━━━━━━━━━━━━━━━━━━ 37s 1s/step - accuracy: 0.7533 - loss: 0.5861 - val_accuracy: 0.6375 - val_loss: 0.9043
Epoch 13/20
32/32 ━━━━━━━━━━━━━━━━━━━━ 37s 1s/step - accuracy: 0.7650 - loss: 0.5553 - val_accuracy: 0.7073 - val_loss: 0.7137
Epoch 14/20
32/32 ━━━━━━━━━━━━━━━━━━━━ 37s 1s/step - accuracy: 0.7649 - loss: 0.5702 - val_accuracy: 0.6640 - val_loss: 0.9710
Epoch 15/20
32/32 ━━━━━━━━━━━━━━━━━━━━ 37s 1s/step - accuracy: 0.7725 - loss: 0.5546 - val_accuracy: 0.7240 - val_loss: 0.6727
Epoch 16/20
32/32 ━━━━━━━━━━━━━━━━━━━━ 37s 1s/step - accuracy: 0.7850 - loss: 0.5131 - val_accuracy: 0.7043 - val_loss: 0.7941
Epoch 17/20
32/32 ━━━━━━━━━━━━━━━━━━━━ 38s 1s/step - accuracy: 0.7907 - loss: 0.5037 - val_accuracy: 0.6876 - val_loss: 0.9178
Epoch 18/20
32/32 ━━━━━━━━━━━━━━━━━━━━ 37s 1s/step - accuracy: 0.7991 - loss: 0.4925 - val_accuracy: 0.7770 - val_loss: 0.5684
Epoch 19/20
32/32 ━━━━━━━━━━━━━━━━━━━━ 37s 1s/step - accuracy: 0.8112 - loss: 0.4758 - val_accuracy: 0.7760 - val_loss: 0.5350
Epoch 20/20
32/32 ━━━━━━━━━━━━━━━━━━━━ 37s 1s/step - accuracy: 0.8201 - loss: 0.4450 - val_accuracy: 0.7829 - val_loss: 0.5684
Saving model.
Plotting Model Accuracy.
Saved Graph #1
Plotting Model Loss
Saved Graph #2.
Loading model.
Running inference on new data.
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 32ms/step
[[ 0.06867445  0.82534647 -3.3963585 ]]
indexOfMax: 1
Done

