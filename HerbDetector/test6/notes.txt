def make_model(input_shape, num_classes):
    inputs = keras.Input(shape=input_shape)

    

    # Entry block
    x = layers.Rescaling(1.0 / 255)(inputs)
    x = layers.Conv2D(32, (3, 3), strides=1, activation='relu')(x)
    x = layers.AveragePooling2D((2, 2))(x)
    x = layers.Conv2D(64, (3, 3), strides=1, activation='relu')(x)
    #x = layers.AveragePooling2D((2, 2))(x)
    #x = layers.Conv2D(64, (3, 3), strides=1, activation='relu')(x)


    if num_classes == 2:
        units = 1
    else:
        units = num_classes

    x = layers.Flatten()(x)
    #x = layers.Dropout(0.25)(x)
    # We specify activation=None so as to return logits
    outputs = layers.Dense(units, activation=None)(x)
    return keras.Model(inputs, outputs)

print("Building a model.")
model = make_model(input_shape=image_size+(3,), num_classes=3)

--------------------------------------------------------


2024-01-23 11:26:03.537999: I tensorflow/core/util/port.cc:113] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
2024-01-23 11:26:03.556928: I tensorflow/core/platform/cpu_feature_guard.cc:210] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
To enable the following instructions: AVX2 AVX512F AVX512_VNNI FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.
Finished importing.
Filter out corrupted images.
Deleted 0 images
Generating a Dataset.
Found 929 files belonging to 3 classes.
Using 744 files for training.
Using 185 files for validation.
Applying `data_augmentation` to the training images.
Prefetching samples in GPU memory helps maximize GPU utilization.
Building a model.
Saved Model Layout Map.
Training the model.
Epoch 1/25
6/6 ━━━━━━━━━━━━━━━━━━━━ 5s 556ms/step - accuracy: 0.3795 - loss: 2.6397 - val_accuracy: 0.3189 - val_loss: 2.0070
Epoch 2/25
6/6 ━━━━━━━━━━━━━━━━━━━━ 4s 532ms/step - accuracy: 0.3498 - loss: 2.0109 - val_accuracy: 0.3514 - val_loss: 1.4637
Epoch 3/25
6/6 ━━━━━━━━━━━━━━━━━━━━ 4s 531ms/step - accuracy: 0.4035 - loss: 1.3695 - val_accuracy: 0.3027 - val_loss: 1.2549
Epoch 4/25
6/6 ━━━━━━━━━━━━━━━━━━━━ 4s 540ms/step - accuracy: 0.3667 - loss: 1.1383 - val_accuracy: 0.4703 - val_loss: 1.0216
Epoch 5/25
6/6 ━━━━━━━━━━━━━━━━━━━━ 4s 535ms/step - accuracy: 0.4360 - loss: 1.0224 - val_accuracy: 0.6162 - val_loss: 0.9887
Epoch 6/25
6/6 ━━━━━━━━━━━━━━━━━━━━ 4s 534ms/step - accuracy: 0.6117 - loss: 0.9651 - val_accuracy: 0.6649 - val_loss: 0.9303
Epoch 7/25
6/6 ━━━━━━━━━━━━━━━━━━━━ 4s 546ms/step - accuracy: 0.6607 - loss: 0.8966 - val_accuracy: 0.6378 - val_loss: 0.8644
Epoch 8/25
6/6 ━━━━━━━━━━━━━━━━━━━━ 4s 535ms/step - accuracy: 0.7127 - loss: 0.8083 - val_accuracy: 0.5838 - val_loss: 0.9190
Epoch 9/25
6/6 ━━━━━━━━━━━━━━━━━━━━ 4s 537ms/step - accuracy: 0.6853 - loss: 0.7653 - val_accuracy: 0.6865 - val_loss: 0.8128
Epoch 10/25
6/6 ━━━━━━━━━━━━━━━━━━━━ 4s 537ms/step - accuracy: 0.7265 - loss: 0.6721 - val_accuracy: 0.6108 - val_loss: 1.0092
Epoch 11/25
6/6 ━━━━━━━━━━━━━━━━━━━━ 4s 543ms/step - accuracy: 0.7184 - loss: 0.6861 - val_accuracy: 0.7189 - val_loss: 0.7549
Epoch 12/25
6/6 ━━━━━━━━━━━━━━━━━━━━ 4s 538ms/step - accuracy: 0.7753 - loss: 0.5744 - val_accuracy: 0.7676 - val_loss: 0.6785
Epoch 13/25
6/6 ━━━━━━━━━━━━━━━━━━━━ 4s 537ms/step - accuracy: 0.7714 - loss: 0.5619 - val_accuracy: 0.7514 - val_loss: 0.7003
Epoch 14/25
6/6 ━━━━━━━━━━━━━━━━━━━━ 5s 552ms/step - accuracy: 0.8415 - loss: 0.4869 - val_accuracy: 0.6378 - val_loss: 0.7984
Epoch 15/25
6/6 ━━━━━━━━━━━━━━━━━━━━ 5s 549ms/step - accuracy: 0.8038 - loss: 0.5060 - val_accuracy: 0.5892 - val_loss: 1.0185
Epoch 16/25
6/6 ━━━━━━━━━━━━━━━━━━━━ 4s 540ms/step - accuracy: 0.7788 - loss: 0.5129 - val_accuracy: 0.6432 - val_loss: 0.9243
Epoch 17/25
6/6 ━━━━━━━━━━━━━━━━━━━━ 4s 543ms/step - accuracy: 0.8808 - loss: 0.4239 - val_accuracy: 0.7297 - val_loss: 0.5789
Epoch 18/25
6/6 ━━━━━━━━━━━━━━━━━━━━ 5s 545ms/step - accuracy: 0.8582 - loss: 0.3964 - val_accuracy: 0.8054 - val_loss: 0.6298
Epoch 19/25
6/6 ━━━━━━━━━━━━━━━━━━━━ 4s 546ms/step - accuracy: 0.8751 - loss: 0.3875 - val_accuracy: 0.7946 - val_loss: 0.5158
Epoch 20/25
6/6 ━━━━━━━━━━━━━━━━━━━━ 4s 543ms/step - accuracy: 0.9120 - loss: 0.3280 - val_accuracy: 0.8162 - val_loss: 0.4472
Epoch 21/25
6/6 ━━━━━━━━━━━━━━━━━━━━ 4s 544ms/step - accuracy: 0.8988 - loss: 0.3265 - val_accuracy: 0.8703 - val_loss: 0.3680
Epoch 22/25
6/6 ━━━━━━━━━━━━━━━━━━━━ 5s 549ms/step - accuracy: 0.8447 - loss: 0.3692 - val_accuracy: 0.7946 - val_loss: 0.4993
Epoch 23/25
6/6 ━━━━━━━━━━━━━━━━━━━━ 4s 547ms/step - accuracy: 0.9134 - loss: 0.2806 - val_accuracy: 0.7081 - val_loss: 0.7756
Epoch 24/25
6/6 ━━━━━━━━━━━━━━━━━━━━ 4s 537ms/step - accuracy: 0.9129 - loss: 0.2825 - val_accuracy: 0.8162 - val_loss: 0.4970
Epoch 25/25
6/6 ━━━━━━━━━━━━━━━━━━━━ 4s 545ms/step - accuracy: 0.9245 - loss: 0.2627 - val_accuracy: 0.8324 - val_loss: 0.4525
Saving model.
Plotting Model Accuracy.
Saved Graph #1
Plotting Model Loss
Saved Graph #2.
Loading model.
Running inference on new data.
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 32ms/step
[[ 0.6249523  -0.64723366 -2.7760959 ]]
indexOfMax: 0
Done

